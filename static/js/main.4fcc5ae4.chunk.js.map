{"version":3,"sources":["components/display/index.js","components/Input/index.js","components/modules/index.js","components/colorbox/index.js","App.js","serviceWorker.js","index.js"],"names":["Display","className","style","width","height","backgroundColor","this","props","color","border","borderRadius","Component","Input","handleColorChange","value","onChange","getContrastColor","contrast","startsWith","temp","split","shift","map","i","swap","join","Colorbox","state","colorList","mode","handleModeChange","setState","e","target","saveColor","list","length","push","removeItem","item","splice","indexOf","validateColorName","name","valid","filter","a","self","swapColors","onClick","display","flexDirection","marginRight","fontSize","fontWeight","key","draggable","onDrag","onDoubleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fcc5ae4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './display.css';\nimport PropTypes from 'prop-types';\n\nclass Display extends Component {\n  render() {\n    return (\n      <div className='display'>\n        <div style={{width: '20em', height: '10em', backgroundColor: this.props.color, \n          border: '5px solid #fff', borderRadius: '15px'}}\n        />\n      </div>\n    );\n  }\n}\n\nDisplay.propTypes = {\n  color: PropTypes.string\n};\n\nexport default Display;","import React, { Component } from 'react';\nimport './input.css';\nimport PropTypes from 'prop-types';\n\nclass Input extends Component {\n  render() {\n    const { color, handleColorChange } = this.props;\n    return (\n      <div className=\"input\">\n        <input value={color} \n          onChange={handleColorChange} />\n      </div>\n    );\n  }\n}\n\nInput.propTypes = {\n  color: PropTypes.string,\n  handleColorChange: PropTypes.func,\n  mode: PropTypes.string\n};\n  \n\nexport default Input;","export const getContrastColor = (color) => {\n  let contrast = '';\n  if (color.startsWith('#')) {\n    let temp = color.split('');\n    temp.shift();\n    contrast = temp.map(i => i = swap(i));\n    contrast = `#${contrast.join('')}`;\n  }\n  else if (color.startsWith('RGB') || color.startsWith('rgb')) {\n    // console.log('rgb!');\n  }\n  else {\n    // console.log('nope');\n  }\n  return contrast;\n};\n\nexport const swap = (i) => {\n  switch(i) {\n  case '0':\n    i = 'F';\n    break;\n  case '1':\n    i = 'E';\n    break;\n  case '2':\n    i = 'D';\n    break;\n  case '3':\n    i = 'C';\n    break;\n  case '4':\n    i = 'B';\n    break;\n  case '5':\n    i = 'A';\n    break;\n  case '6':\n    i = '9';\n    break;\n  case '7':\n    i = '8';\n    break;\n  case '8':\n    i = '7';\n    break;\n  case '9':\n    i = '6';\n    break;\n  case 'A':\n    i = '5';\n    break;\n  case 'B':\n    i = '4';\n    break;\n  case 'C':\n    i = '3';\n    break;\n  case 'D':\n    i = '2';\n    break;\n  case 'E':\n    i = '1';\n    break;\n  case 'F':\n    i = '0';\n    break;\n  case 'a':\n    i = '5';\n    break;\n  case 'b':\n    i = '4';\n    break;\n  case 'c':\n    i = '3';\n    break;\n  case 'd':\n    i = '2';\n    break;\n  case 'e':\n    i = '1';\n    break;\n  case 'f':\n    i = '0';\n    break;\n  default:\n    i = '0';\n  }\n  return i;\n};","import React, { Component } from 'react';\nimport './colorbox.css';\nimport Display from '../display/index';\nimport Input from '../Input/index';\nimport { getContrastColor } from '../modules/index.js';\n\nclass Colorbox extends Component {\n    state = {\n      color: '#fff',\n      contrast: '#000',\n      colorList: [],\n      mode: ''\n    }\n    handleModeChange = (mode) => () => {\n      this.setState({ mode, color: '', contrast: '' });\n    }\n    handleColorChange = (e) => {\n      let { contrast } = this.state;\n      let value = e.target.value;\n      let mode = '';\n      // const validated = this.validateColorName(value, this.state.mode);\n      if (value.startsWith('#')) {\n        mode = 'hex';\n      }\n      if (value.startsWith('rgb')) {\n        mode = 'rgb';\n        contrast = '';\n      }\n      if (!value.startsWith('#') && !value.startsWith('rgb')) {\n        mode = 'colorName';\n        contrast = '';\n      }\n      contrast = getContrastColor(e.target.value);\n      this.setState({ color: value, contrast, mode });\n    }\n    saveColor = () => {\n      let list = this.state.colorList;\n      const { color } = this.state;\n      if (color.length > 3) {\n        list.push(color);\n      }\n      this.setState({colorList: list});\n    }\n    removeItem = (item) => () => {\n      let list = this.state.colorList;\n      list.splice(list.indexOf(item), 1);\n      this.setState({colorList: list});\n    }\n    validateColorName = (name, mode) => {\n      let valid = name;\n      if (mode === 'hex') {\n        valid = `#${name}`;\n        valid.split('').filter(function(i, a, self) {\n          return self.indexOf(i) === '#';\n        })\n          .join('');\n      }\n      if (mode === 'rgb') {\n        return valid\n          .split('')\n          .filter(function(item, a, self) {\n            return self.indexOf(item) === '#';\n          })\n          .join('');\n      }\n      return valid;\n    }\n    swapColors = () => {\n      const { contrast, color } = this.state;\n      this.setState({ contrast: color, color: contrast });\n    }\n    render() {\n      const { colorList, color, contrast, mode } = this.state;\n      return (\n        <div className=\"main\">\n          <h1 className='header' style={{color: contrast}}>Colorbox</h1>\n          <div className='buttonBox'>\n            <button onClick={this.handleModeChange('hex')} \n              className={mode === 'hex' ? 'active' : 'inactive'}>\n                  Hex\n            </button>\n            <button onClick={this.handleModeChange('rgb')} \n              className={mode === 'rgb' ? 'active' : 'inactive'}>\n                  RGB\n            </button>\n            <button onClick={this.handleModeChange('colorName')} \n              className={mode === 'colorName' ? 'active' : 'inactive'}>\n                  Color Name\n            </button>\n          </div>\n          <Input color={color}\n            handleColorChange={this.handleColorChange}\n            mode={mode}\n          />\n          <Display color={color} />\n          <div className='btnBox'>\n            <button className='swapBtn' \n              onClick={this.saveColor}>\n                  Save\n            </button>\n            {contrast ? \n              <button className='swapBtn' onClick={this.swapColors}>Swap</button> : null}\n          </div>\n          {contrast ?\n            <div style={{display: 'flex', flexDirection: 'row', height: '1em'}}>\n              <div style={{backgroundColor: contrast, width: '20px', height: '20px', marginRight: '0.5em'}} />\n              <span style={{fontSize: '1.2em', fontWeight: 'bold'}}>Opposite: {contrast}</span>\n            </div> : null}\n         \n          <div className='chosenBox'>\n            {colorList && colorList.length ? colorList.map(i => {\n              return(<div className='colorItem' key={i}\n                draggable onDrag={this.removeItem(i)}\n                onDoubleClick={this.removeItem(i)}>\n                <div style={{width: '1em', height: '1em', backgroundColor: i}}  />\n                <span>{i}</span>\n              </div>);\n            }) : null}\n          </div>\n          <div className='instructions'>\n                Display the color associated with the hex code, rgb value, or CSS color name. \n                Drag or double-tap to remove an item from the list.  Try: rgb(180, 80, 180), \n                #4ba4ba or salmon.\n          </div>\n        </div>\n      );\n    }\n}\n\n\nexport default Colorbox;","import React from 'react';\nimport './App.css';\nimport Colorbox from './components/colorbox/index';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Colorbox />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/colorbox/assets/infoicon.png","components/display/index.js","components/Input/index.js","components/modules/index.js","components/colorbox/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Display","className","style","width","height","backgroundColor","this","props","color","border","borderRadius","Component","Input","handleColorChange","value","onChange","getContrastColor","contrast","startsWith","temp","split","shift","map","i","swap","join","hexCodes","0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","rgbVals","A","B","C","D","E","F","colorNames","getSecondVal","val","Math","floor","Number","Colorbox","state","colorList","mode","error","showInstructions","handleModeChange","setState","e","target","setColorInState","length","chooseColor","item","saveColor","list","push","removeItem","splice","indexOf","swapColors","convertToHex","col","R","G","R1","G1","B1","R2","G2","B2","name","toLowerCase","convertToRgb","getValsFromHex","vals","toUpperCase","val1","val2","val3","includes","convertToColorName","hexToName","newColorName","Object","keys","find","getColorOptions","key","handleShowMobileInstructions","populateColor","src","InfoIconCircle","onClick","alt","display","flexDirection","marginRight","fontSize","fontWeight","draggable","onDrag","onDoubleClick","json","version","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e985120b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/infoicon.d6142527.png\";","import React, { Component } from 'react';\nimport './display.css';\nimport PropTypes from 'prop-types';\n\nclass Display extends Component {\n  render() {\n    return (\n      <div className='display'>\n        <div style={{\n          width: '20em', \n          height: '10em', \n          backgroundColor: this.props.color, \n          border: '5px solid #fff',\n          borderRadius: '15px'\n        }}\n        />\n      </div>\n    );\n  }\n}\n\nDisplay.propTypes = {\n  color: PropTypes.string\n};\n\nexport default Display;","import React, { Component } from 'react';\nimport './input.css';\nimport PropTypes from 'prop-types';\n\nclass Input extends Component {\n  render() {\n    const { color, handleColorChange } = this.props;\n    return (\n      <div className=\"input\">\n        <input value={color} \n          onChange={handleColorChange} />\n      </div>\n    );\n  }\n}\n\nInput.propTypes = {\n  color: PropTypes.string,\n  handleColorChange: PropTypes.func,\n  mode: PropTypes.string\n};\n  \n\nexport default Input;","export const getContrastColor = (color) => {\n  let contrast = '';\n  if (color && color.startsWith('#')) {\n    let temp = color.split('');\n    temp.shift();\n    contrast = temp.map(i => i = swap(i));\n    contrast = `#${contrast.join('')}`;\n  }\n  else if ((color && color.startsWith('RGB')) || (color && color.startsWith('rgb'))) {\n    // console.log('rgb!');\n  }\n  else {\n    // console.log('nope');\n  }\n  return contrast;\n};\n\nexport const swap = (i) => {\n  switch(i) {\n  case '0':\n    i = 'F';\n    break;\n  case '1':\n    i = 'E';\n    break;\n  case '2':\n    i = 'D';\n    break;\n  case '3':\n    i = 'C';\n    break;\n  case '4':\n    i = 'B';\n    break;\n  case '5':\n    i = 'A';\n    break;\n  case '6':\n    i = '9';\n    break;\n  case '7':\n    i = '8';\n    break;\n  case '8':\n    i = '7';\n    break;\n  case '9':\n    i = '6';\n    break;\n  case 'A':\n    i = '5';\n    break;\n  case 'B':\n    i = '4';\n    break;\n  case 'C':\n    i = '3';\n    break;\n  case 'D':\n    i = '2';\n    break;\n  case 'E':\n    i = '1';\n    break;\n  case 'F':\n    i = '0';\n    break;\n  case 'a':\n    i = '5';\n    break;\n  case 'b':\n    i = '4';\n    break;\n  case 'c':\n    i = '3';\n    break;\n  case 'd':\n    i = '2';\n    break;\n  case 'e':\n    i = '1';\n    break;\n  case 'f':\n    i = '0';\n    break;\n  default:\n    i = '0';\n  }\n  return i;\n};\n\nexport const hexCodes = {\n  0: '0',\n  1: '1',\n  2: '2',\n  3: '3',\n  4: '4',\n  5: '5',\n  6: '6',\n  7: '7',\n  8: '8',\n  9: '9',\n  10: 'A',\n  11: 'B',\n  12: 'C',\n  13: 'D',\n  14: 'E',\n  15: 'F'\n};\n\nexport const rgbVals = {\n  0: 0,\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n  9: 9,\n  A: 10,\n  B: 11,\n  C: 12,\n  D: 13,\n  E: 14,\n  F: 15\n};\n\nexport const colorNames = {'aliceblue':'#f0f8ff','antiquewhite':'#faebd7','aqua':'#00ffff','aquamarine':'#7fffd4','azure':'#f0ffff',\n  'beige':'#f5f5dc','bisque':'#ffe4c4','black':'#000000','blanchedalmond':'#ffebcd','blue':'#0000ff','blueviolet':'#8a2be2','brown':'#a52a2a','burlywood':'#deb887',\n  'cadetblue':'#5f9ea0','chartreuse':'#7fff00','chocolate':'#d2691e','coral':'#ff7f50','cornflowerblue':'#6495ed','cornsilk':'#fff8dc','crimson':'#dc143c','cyan':'#00ffff',\n  'darkblue':'#00008b','darkcyan':'#008b8b','darkgoldenrod':'#b8860b','darkgray':'#a9a9a9','darkgreen':'#006400','darkkhaki':'#bdb76b','darkmagenta':'#8b008b','darkolivegreen':'#556b2f',\n  'darkorange':'#ff8c00','darkorchid':'#9932cc','darkred':'#8b0000','darksalmon':'#e9967a','darkseagreen':'#8fbc8f','darkslateblue':'#483d8b','darkslategray':'#2f4f4f','darkturquoise':'#00ced1',\n  'darkviolet':'#9400d3','deeppink':'#ff1493','deepskyblue':'#00bfff','dimgray':'#696969','dodgerblue':'#1e90ff',\n  'firebrick':'#b22222','floralwhite':'#fffaf0','forestgreen':'#228b22','fuchsia':'#ff00ff',\n  'gainsboro':'#dcdcdc','ghostwhite':'#f8f8ff','gold':'#ffd700','goldenrod':'#daa520','gray':'#808080','green':'#008000','greenyellow':'#adff2f',\n  'honeydew':'#f0fff0','hotpink':'#ff69b4',\n  'indianred ':'#cd5c5c','indigo':'#4b0082','ivory':'#fffff0','khaki':'#f0e68c',\n  'lavender':'#e6e6fa','lavenderblush':'#fff0f5','lawngreen':'#7cfc00','lemonchiffon':'#fffacd','lightblue':'#add8e6','lightcoral':'#f08080','lightcyan':'#e0ffff','lightgoldenrodyellow':'#fafad2',\n  'lightgrey':'#d3d3d3','lightgreen':'#90ee90','lightpink':'#ffb6c1','lightsalmon':'#ffa07a','lightseagreen':'#20b2aa','lightskyblue':'#87cefa','lightslategray':'#778899','lightsteelblue':'#b0c4de',\n  'lightyellow':'#ffffe0','lime':'#00ff00','limegreen':'#32cd32','linen':'#faf0e6',\n  'magenta':'#ff00ff','maroon':'#800000','mediumaquamarine':'#66cdaa','mediumblue':'#0000cd','mediumorchid':'#ba55d3','mediumpurple':'#9370d8','mediumseagreen':'#3cb371','mediumslateblue':'#7b68ee',\n  'mediumspringgreen':'#00fa9a','mediumturquoise':'#48d1cc','mediumvioletred':'#c71585','midnightblue':'#191970','mintcream':'#f5fffa','mistyrose':'#ffe4e1','moccasin':'#ffe4b5',\n  'navajowhite':'#ffdead','navy':'#000080',\n  'oldlace':'#fdf5e6','olive':'#808000','olivedrab':'#6b8e23','orange':'#ffa500','orangered':'#ff4500','orchid':'#da70d6',\n  'palegoldenrod':'#eee8aa','palegreen':'#98fb98','paleturquoise':'#afeeee','palevioletred':'#d87093','papayawhip':'#ffefd5','peachpuff':'#ffdab9','peru':'#cd853f','pink':'#ffc0cb','plum':'#dda0dd','powderblue':'#b0e0e6','purple':'#800080',\n  'rebeccapurple':'#663399','red':'#ff0000','rosybrown':'#bc8f8f','royalblue':'#4169e1',\n  'saddlebrown':'#8b4513','salmon':'#fa8072','sandybrown':'#f4a460','seagreen':'#2e8b57','seashell':'#fff5ee','sienna':'#a0522d','silver':'#c0c0c0','skyblue':'#87ceeb','slateblue':'#6a5acd','slategray':'#708090','snow':'#fffafa','springgreen':'#00ff7f','steelblue':'#4682b4',\n  'tan':'#d2b48c','teal':'#008080','thistle':'#d8bfd8','tomato':'#ff6347','turquoise':'#40e0d0',\n  'violet':'#ee82ee',\n  'wheat':'#f5deb3','white':'#ffffff','whitesmoke':'#f5f5f5',\n  'yellow':'#ffff00','yellowgreen':'#9acd32'};\n\nexport const getSecondVal = (val) => {\n  const temp = `${val}`.split('.')[1];\n  const final = Math.floor(Number(`.${temp || 0}`) * 16);\n  return final;\n};","/* eslint-disable no-console */\nimport React, { Component } from 'react';\nimport './colorbox.css';\nimport Display from '../display/index';\nimport Input from '../Input/index';\nimport InfoIconCircle from './assets/infoicon.png';\nimport { \n  getContrastColor, \n  hexCodes, \n  colorNames, \n  getSecondVal, \n  rgbVals } from '../modules/index.js';\nimport json from '../../../package.json';\n\nclass Colorbox extends Component {\nstate = {\n  color: '#ffffff',\n  contrast: '#000000',\n  colorList: [],\n  mode: 'hex',\n  error: '',\n  showInstructions: false\n}\n\nhandleModeChange = (mode) => () => {\n  this.setState({ mode, color: '', contrast: '', error: '' });\n}\n\nhandleColorChange = (e) => {\n  let value = e.target.value;\n  this.setColorInState(value);\n}\n\nsetColorInState = (color) => {\n  let { contrast } = this.state;\n  let mode = '';\n  if (color && color.startsWith('#')) {\n    mode = 'hex';\n    contrast = getContrastColor(color);\n  }\n  if (color && color.startsWith('rgb')) {\n    mode = 'rgb';\n    contrast = getContrastColor(color);\n  }\n  if (color && !color.startsWith('#') && !color.startsWith('rgb')) {\n    mode = 'colorName';\n    if (color && color.length) {\n      const temp = colorNames[color];\n      if (temp) {\n        contrast = getContrastColor(temp);\n        this.setState({contrast, error: ''});\n      }\n    }\n  }\n  if (!color) {\n    contrast = '';\n  }\n  if (color === '') {\n    contrast = '';\n  }\n  this.setState({ color: color, contrast, mode, error: '' });\n}\n\nchooseColor = (item) => () => {\n  this.setColorInState(item);\n}\n\nsaveColor = () => {\n  let list = this.state.colorList;\n  const { color } = this.state;\n  if (color.length > 2) {\n    list.push(color);\n  }\n  this.setState({colorList: list, error: ''});\n}\n\nremoveItem = (item) => () => {\n  let list = this.state.colorList;\n  list.splice(list.indexOf(item), 1);\n  this.setState({colorList: list, error: ''});\n}\n\nswapColors = () => {\n  const { contrast, color } = this.state;\n  let { mode } = this.state;\n  if (contrast.startsWith('#')) {\n    mode = 'hex';\n  }\n  if (!contrast.startsWith('#') && !contrast.startsWith('rgb(')) {\n    mode = 'colorName';\n  }\n  this.setState({ contrast: color, color: contrast, error: '', mode });\n}\n\nconvertToHex = () => {\n  const col = this.state.color;\n  let color = '';\n  if (col && this.state.mode === 'rgb') {\n    let temp = col.split('(')[1];\n    temp = temp.split(')')[0];\n    temp = temp.split(',');\n    temp = temp.map(i => Number(i));\n    const R = temp[0]/16;\n    const G = temp[1]/16;\n    const B = temp[2]/16;\n    const R1 = hexCodes[Math.floor(R)];\n    const G1 = hexCodes[Math.floor(G)];\n    const B1 = hexCodes[Math.floor(B)];\n    const R2 = hexCodes[getSecondVal(R)];\n    const G2 = hexCodes[getSecondVal(G)];\n    const B2 = hexCodes[getSecondVal(B)];\n    const contrast = getContrastColor(`#${R1}${R2}${G1}${G2}${B1}${B2}`);\n    this.setState({\n      color: `#${R1}${R2}${G1}${G2}${B1}${B2}`, \n      mode: 'hex', \n      contrast, \n      error: ''\n    });\n    color = `#${R1}${R2}${G1}${G2}${B1}${B2}`;\n  }\n  if (col && this.state.mode === 'colorName') {\n    const name = col.toLowerCase();\n    const contrast = getContrastColor(colorNames[name]);\n    this.setState({color: colorNames[name], mode: 'hex', contrast, error: ''});\n    color = colorNames[name];\n  }\n  return color;\n}\n\nconvertToRgb = () => {\n  const col = this.state.color;\n  let error = '';\n  const getValsFromHex = (vals = '') => {\n    let temp = vals.toUpperCase();\n    temp = temp.split('');\n    const val1 = (rgbVals[temp[1]] * 16) + (rgbVals[temp[2]]);\n    const val2 = (rgbVals[temp[3]] * 16) + (rgbVals[temp[4]]);\n    const val3 = (rgbVals[temp[5]] * 16) + (rgbVals[temp[6]]);\n    return `rgb(${val1}, ${val2}, ${val3})`;\n  };\n  if (this.state.mode === 'hex') {\n    if (col.length === 7) {\n      const color = getValsFromHex(col);\n      this.setState({color, mode: 'rgb', error });\n    } else {\n      error = 'Hex must have 6 characters';\n      this.setState({error});\n    }\n  }\n  if (this.state.mode === 'colorName') {\n    const name = col.toLowerCase();\n    let color = getValsFromHex(colorNames[name]);\n    if (color.includes('NaN')) {\n      color = col;\n      error = 'Not a valid color';\n    }\n    this.setState({color, mode: 'rgb', error });\n  }\n}\n\nconvertToColorName = () => {\n  const col = this.state.color;\n  const hexToName = (color = '') => {\n    let newColorName = '';\n    const temp = Object.keys(colorNames).find(i => colorNames[i] === color.toLowerCase());\n    if (temp) {\n      newColorName = temp;\n      this.setState({color: newColorName, mode: 'colorName'});\n    } else {\n      this.setState({error: 'No CSS color name for this code.'});\n    }\n  };\n  if (this.state.mode === 'hex') {\n    hexToName(col);\n  }\n  if (this.state.mode === 'rgb') {\n    const hexCol = this.convertToHex().toLowerCase();\n    hexToName(hexCol);\n  }\n}\n\ngetColorOptions = () => Object.keys(colorNames).map(i => {\n  return (\n    <option key={`${colorNames[i]}${i}`} value={i}>\n      {i}\n    </option>\n  );\n})\n\nhandleShowMobileInstructions = () => {\n  this.state.showInstructions \n    ? this.setState({showInstructions: false}) \n    : this.setState({showInstructions: true});\n}\n\npopulateColor = (color) => {\n  this.setColorInState(color);\n}\n\nrender() {\n  const { colorList, color, contrast, mode, error, showInstructions } = this.state;\n  return (\n    <div className=\"main\">\n      <h1 className='header' style={{color: contrast}}>Colorbox</h1>\n      <div className='infoIcon'>\n        <img \n          src={InfoIconCircle} \n          onClick={this.handleShowMobileInstructions}\n          width='20px'\n          height='20px'\n          alt='info-icon' />\n      </div>\n      {showInstructions ? \n        <div className='mobileInstructions'>\n          <div>\n            <p>\n            Display the color associated with the hex code, rgb value, or CSS color name typed into \n            the input, or select a color name from the dropdown. Try: <span onClick={() => this.populateColor('rgb(180, 80, 180)')}><strong>rgb(180, 80, 180)</strong></span>, \n              <span onClick={() => this.populateColor('#4ba4ba')}> <strong>#4ba4ba</strong></span> or <span onClick={() => this.populateColor('salmon')}><strong>salmon</strong></span>.\n            </p>\n            <p>\n            Swap to view contrasting color, convert color code to hex, rgb value or color \n            name (if applicable), tap/click saved color to view again, double click/tap or \n            drag to remove saved color.\n            </p>\n          </div>\n        </div> : null}\n      <div className='buttonBox'>\n        <button onClick={this.convertToHex} \n          className={mode === 'hex' ? 'active' : 'inactive'}>\n                  Hex\n        </button>\n        <button onClick={this.convertToRgb} \n          className={mode === 'rgb' ? 'active' : 'inactive'}>\n                  RGB\n        </button>\n        <button onClick={this.convertToColorName} \n          className={mode === 'colorName' ? 'active' : 'inactive'}>\n                  Color Name\n        </button>\n      </div>\n      <div className='inputWithSave'>\n        <Input \n          color={color}\n          handleColorChange={this.handleColorChange}\n          mode={mode}\n        />\n        {color ?\n          <button \n            className='saveBtn' \n            onClick={this.saveColor}>\n                  Add to List\n          </button> : null}\n      </div>\n      <div>\n        <h3 style={{color: 'darkRed'}}>{error}</h3>\n      </div>\n      <Display color={color} />\n      <div className='btnBox'>\n        {contrast ? \n          <button className='swapBtn' onClick={this.swapColors}>Show Opposite</button> : null}\n        <select\n          value={this.state.color}\n          className='colorSelect' \n          onChange={this.handleColorChange}>\n          <option value=''>Choose color...</option>\n          {this.getColorOptions()}\n        </select>\n      </div>\n      {contrast ?\n        <div style={{\n          display: 'flex', \n          flexDirection: 'row', \n          height: '1em'\n        }}>\n          <div style={{\n            backgroundColor: contrast, \n            width: '20px', \n            height: '20px',\n            marginRight: '0.5em',\n            borderRadius: '5px'\n          }} />\n          <span style={{\n            fontSize: '1.2em', \n            fontWeight: 'bold'\n          }}>Opposite: {contrast}</span>\n        </div> : null}\n         \n      <div className='chosenBox'>\n        {colorList && colorList.length ? colorList.map(i => {\n          return(\n            <div \n              className='colorItem' \n              key={i}\n              draggable \n              onClick={this.chooseColor(i)}\n              onDrag={this.removeItem(i)}\n              onDoubleClick={this.removeItem(i)}>\n              <div style={{\n                width: '2em', \n                height: '2em', \n                backgroundColor: i,\n                borderRadius: '8px'\n              }}  />\n              <span className='colorName'>{i}</span>\n            </div>);\n        }) : null}\n      </div>\n      <div className='instructions'>\n        <div>\n          <p>\n            Display the color associated with the hex code, rgb value, or CSS color name typed into \n            the input, or select a color name from the dropdown. Try: <span onClick={() => this.populateColor('rgb(180, 80, 180)')}><strong>rgb(180, 80, 180)</strong></span>, \n            <span onClick={() => this.populateColor('#4ba4ba')}> <strong>#4ba4ba</strong></span> or <span onClick={() => this.populateColor('salmon')}><strong>salmon</strong></span>.\n          </p>\n          <p>\n            Swap to view contrasting color, convert color code to hex, rgb value or color \n            name (if applicable), tap/click saved color to view again, double click/tap or \n            drag to remove saved color.\n          </p>\n        </div>\n      </div>\n      <h3>Version: {json.version}</h3>\n    </div>\n  );\n}\n}\n\n\nexport default Colorbox;","import React from 'react';\nimport './App.css';\nimport Colorbox from './components/colorbox/index';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Colorbox />\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable no-console */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}